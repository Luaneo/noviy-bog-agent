from langgraph.graph import START, END, StateGraph
from langchain_core.documents import Document
from pydantic import BaseModel
from langchain import hub
from typing import List, Optional
import os
from dotenv import load_dotenv
from gigachat import GigaChat
from agentsystem.parsers import load_and_split_documents
from agentsystem.chroma_db import create_vectorstore, load_existing_vectorstore, get_retriever

load_dotenv()

gigachat = GigaChat(
    credentials=os.getenv("GIGACHAT_CREDENTIALS"),
    model="GigaChat-Max",
    verify_ssl_certs=False
)

class State(BaseModel):
    question: str
    context: List[Document] = []
    answer: str = ""
    retriever: Optional[object] = None

def retrieve(state: State):
    if state.retriever is None:
        vectorstore = load_existing_vectorstore()
        if vectorstore is None:
            print("üìö –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            documents = load_and_split_documents()
            vectorstore = create_vectorstore(documents)
        else:
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            
        retriever = get_retriever(vectorstore, k=3)
        state.retriever = retriever
    
    retrieved_docs = state.retriever.get_relevant_documents(state.question)
    return {'context': retrieved_docs, 'retriever': state.retriever}

def generate(state: State):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    docs_content = "\n\n".join([doc.page_content for doc in state.context])

    prompt = f"""
    –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    
    –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
    {docs_content}
    
    –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {state.question}
    
    –û—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.
    """
    
    response = gigachat.chat(prompt)
    
    return {'answer': response.choices[0].message.content}

def should_continue(state: State):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    if state.answer:
        return "end"
    else:
        return "continue"

workflow = StateGraph(State)

workflow.add_node("retrieve", retrieve)
workflow.add_node("generate", generate)


workflow.add_edge(START, "retrieve")
workflow.add_edge("retrieve", "generate")
workflow.add_edge("generate", END)

app = workflow.compile()

def run_rag_system(question: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    initial_state = State(question=question)
    result = app.invoke(initial_state)
    return result["answer"]

if __name__ == "__main__":
    test_question = "–ö–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å npm ERR! EACCES –ø—Ä–∏ —Å–±–æ—Ä–∫–µ?"
    answer = run_rag_system(test_question)
    print(f"–í–æ–ø—Ä–æ—Å: {test_question}")
    print(f"–û—Ç–≤–µ—Ç: {answer}")