#!/usr/bin/env python3
"""
FastAPI —Å–µ—Ä–≤–µ—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π —á–∞—Ç–æ–≤ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

from fastapi import FastAPI, HTTPException, Depends, status, Form
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database.database import get_db, create_tables
from database.models import User, Chat, Message

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from auth.auth import get_or_create_user
from auth.dependencies import get_current_user

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —á–∞—Ç–æ–≤
from chat_service import (
    create_chat, get_user_chats, get_chat_by_id, delete_chat,
    add_message, get_chat_messages, get_chat_messages_for_context
)

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ö–µ–º
from schemas import (
    UserLogin, UserResponse,
    ChatCreate, ChatResponse, MessageResponse, ChatMessageRequest, ChatMessageResponse
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
from agentsystem.chroma_db import load_existing_vectorstore, get_retriever
from gigachat import GigaChat
import os
from fastapi.responses import StreamingResponse
from dotenv import load_dotenv

load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
global_retriever = None
global_gigachat = None

def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global global_retriever, global_gigachat
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        from agentsystem.chroma_db import load_existing_vectorstore, get_retriever
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        vectorstore = load_existing_vectorstore()
        if vectorstore is None:
            print("üìö –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            from agentsystem.parsers import load_and_split_documents
            from agentsystem.chroma_db import create_vectorstore
            
            documents = load_and_split_documents()
            vectorstore = create_vectorstore(documents)
        
        # –°–æ–∑–¥–∞–µ–º retriever
        global_retriever = get_retriever(vectorstore, k=3)
        print("‚úÖ ChromaDB –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromaDB: {e}")
        global_retriever = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GigaChat
    try:
        global_gigachat = GigaChat(
            credentials=os.getenv("GIGACHAT_CREDENTIALS"),
            verify_ssl_certs=False,
            timeout=30
        )
        print("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
        global_gigachat = None

app = FastAPI(
    title="IT Support Chat System API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤ —Å IT –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    version="2.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "*",  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è ngrok
        "http://localhost:3000",  # React dev server
        "http://localhost:8080",  # Vue dev server
        "https://*.ngrok.io",     # Ngrok URLs
        "https://*.ngrok-free.app" # –ù–æ–≤—ã–µ ngrok URLs
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

@app.options("/{path:path}")
async def options_handler(path: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {"message": "OK"}

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    initialize_database()

# ==================== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ====================

@app.post("/auth/login", response_model=UserResponse)
async def login(user_credentials: UserLogin, db: Session = Depends(get_db)):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û
        user = db.query(User).filter(User.fio == user_credentials.fio).first()
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        from auth.auth import verify_password
        if not verify_password(user_credentials.password, user.password_hash):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        from datetime import datetime
        user.last_login = datetime.utcnow()
        db.commit()
        
        return user
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/auth/me", response_model=UserResponse)
async def get_current_user_info(
    fio: str = Form(...),
    password: str = Form(...),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user

# ==================== –ß–ê–¢–´ ====================

@app.post("/chats", response_model=ChatResponse)
async def create_new_chat(
    chat_data: ChatCreate,
    fio: str = Form(...),
    password: str = Form(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    chat = create_chat(db, current_user.id, chat_data.title)
    return chat

@app.post("/chats/list", response_model=List[ChatResponse])
async def get_chats(
    fio: str = Form(...),
    password: str = Form(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chats = get_user_chats(db, current_user.id)
    return chats

@app.post("/chats/{chat_id}/info", response_model=ChatResponse)
async def get_chat(
    chat_id: int,
    fio: str = Form(...),
    password: str = Form(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
    chat = get_chat_by_id(db, chat_id, current_user.id)
    if not chat:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return chat

@app.post("/chats/{chat_id}/delete")
async def delete_chat_endpoint(
    chat_id: int,
    fio: str = Form(...),
    password: str = Form(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
    success = delete_chat(db, chat_id, current_user.id)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    return {"message": "–ß–∞—Ç —É–¥–∞–ª–µ–Ω"}

@app.post("/chats/{chat_id}/messages", response_model=List[MessageResponse])
async def get_messages(
    chat_id: int,
    fio: str = Form(...),
    password: str = Form(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    messages = get_chat_messages(db, chat_id, current_user.id)
    return messages

# ==================== RAG –°–ò–°–¢–ï–ú–ê ====================

def run_rag_system_fast(question: str):
    """–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è RAG —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º retriever"""
    global global_retriever, global_gigachat
    
    if global_retriever is None:
        return "–û—à–∏–±–∫–∞: ChromaDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    if global_gigachat is None:
        return "–û—à–∏–±–∫–∞: GigaChat –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        retrieved_docs = global_retriever.invoke(question)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        docs_content = "\n\n".join([doc.page_content for doc in retrieved_docs])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        prompt = f"""
        –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
        
        –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
        {docs_content}
        
        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}
        
        –û—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.
        """
        
        response = global_gigachat.chat(prompt)
        return response.choices[0].message.content
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

def classify_question(question: str):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ GigaChat"""
    global global_gigachat
    
    if global_gigachat is None:
        return "–û—à–∏–±–∫–∞: GigaChat –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    classification_prompt = f"""
    –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–≥–ª–∞ –±—ã –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.
    –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

    –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    {question}
    """
    
    try:
        classification_response = global_gigachat.chat(classification_prompt)
        return classification_response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"

@app.post("/classify")
async def classify_endpoint(messages: List[dict]):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if not messages:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message = messages[-1]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question = last_message.get("message", "").strip()
    if not question:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
    
    try:
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        classification = classify_question(question)
        
        return {"classification": classification}
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
        )


@app.post("/question/stream")
async def stream_question(messages: List[dict]):
    def generate_stream():
        try:
            question = messages[-1]["message"]
            
            retrieved_docs = global_retriever.invoke(question)
            docs_content = "\n\n".join([doc.page_content for doc in retrieved_docs])
            
            prompt = f"""
            –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
            {docs_content}
            
            –í–æ–ø—Ä–æ—Å: {question}
            """
            
            for chunk in global_gigachat.stream(prompt):
                if chunk.choices[0].delta.content:
                    yield f"{chunk.choices[0].delta.content}"
            
        except Exception as e:
            yield f"data: –û—à–∏–±–∫–∞: {str(e)}\n\n"
        finally:
            yield "data: [DONE]\n\n"
    
    return StreamingResponse(generate_stream(), media_type="text/event-stream")



@app.post("/question", response_model=ChatMessageResponse)
async def process_question(messages: List[dict]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ LangGraph"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if not messages:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message = messages[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if last_message.get("by") != "user":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question = last_message.get("message", "").strip()
    if not question:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        )
    
    try:
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        classification = classify_question(question)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LangGraph RAG —Å–∏—Å—Ç–µ–º—É
        answer = run_rag_system_fast(question)
        
        return ChatMessageResponse(
            answer=answer,
            classification=classification
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
        )

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "IT Support Chat System API",
        "version": "2.0.0",
        "features": [
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏",
            "RAG —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"
        ],
        "endpoints": {
            "auth": {
                "POST /auth/login": "–í—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (email + –ø–∞—Ä–æ–ª—å + –§–ò–û + —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞)",
                "GET /auth/me": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
            },
            "chats": {
                "POST /chats": "–°–æ–∑–¥–∞—Ç—å —á–∞—Ç",
                "GET /chats": "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
                "GET /chats/{id}": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ",
                "DELETE /chats/{id}": "–£–¥–∞–ª–∏—Ç—å —á–∞—Ç",
                "GET /chats/{id}/messages": "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"
            },
            "question": {
                "POST /question": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"
            }
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "chat_api_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
